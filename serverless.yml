service: dare-guardians-bot

provider:
  name: aws
  runtime: python3.11
  architecture: arm64
  stage: production
  region: eu-west-1
  deploymentBucket:
    serverSideEncryption: AES256
    blockPublicAccess: true
  environment:
    TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}
    DYNAMO_TABLE: ${env:DYNAMO_TABLE}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:eu-west-1:${env:AWS_ACCOUNT_ID}:table/${env:DYNAMO_TABLE}"

package:
  individually: true
  patterns:
    - "!./**"

functions:
  guardians-listen:
    handler: main.handler
    description: "Lambda function in charge of answering the bot"
    memorySize: 128
    timeout: 120
    environment:
      GAME_PASSWORD: ${env:GAME_PASSWORD}
    url: true
    layers:
      - Ref: PythonRequirementsLambdaLayer
    package:
      patterns:
        - "main.py"
        - "commands/**"
  guardians-scheduler:
    handler: scheduler.handler
    description: "Lambda function in charge of sending the weekly dares"
    memorySize: 128
    timeout: 120
    environment:
      GAME_PASSWORD: ${env:GAME_PASSWORD}
    layers:
      - Ref: PythonRequirementsLambdaLayer
    package:
      patterns:
        - "scheduler.py"
        - "dares.json"
    events:
      - schedule: cron(0 10 * * 2 *)

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    slim: true
    layer: true
